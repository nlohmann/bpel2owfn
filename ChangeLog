  ____ _   _ _   _   ____  ____  _____ _     ____    __        _______ _   _ 
 / ___| \ | | | | | | __ )|  _ \| ____| |   |___ \ __\ \      / /  ___| \ | |
| |  _|  \| | | | | |  _ \| |_) |  _| | |     __) / _ \ \ /\ / /| |_  |  \| |
| |_| | |\  | |_| | | |_) |  __/| |___| |___ / __/ (_) \ V  V / |  _| | |\  |
 \____|_| \_|\___/  |____/|_|   |_____|_____|_____\___/ \_/\_/  |_|   |_| \_|
 http://service-technology.org/bpel2owfn - http://gnu.org/software/bpelo2wfn


Version 2.04-unreleased
=======================

* fixed bug #1387 (`https://gna.org/bugs/?13837'): assertion failed if
  choreographies are used without `communicationonly' parameter

* updated maintainer scripts

* implemented new final conditions for oWFN output (not
  `ALL_EXTERNAL_PLACES_EMPTY' any more)

* fixed oWFN output (problems with nested `ALL_OTHER_PLACES_EMPTY')

* fixed bug #12110 (`https://gna.org/bugs/?12110'): compilation errors using
  GCC 4.3.1

* adapted the cleaning scripts

* renamed Makefile target `hu-prepare' to `cvs-clean'

* added `--bug' parameter

* neither Automake nor Autoconf set any gcc parameters

* removed `extension-data.*', because nobody will be working on this

* added Makefiles for a Manpage created by help2man

* fixed a small bug that yielded parse problems when strings appeared in
  `<documentation>' elements

* renamed generated configuration header to `config.h' to achieve
  compatibility with getopt and the sources generated by GNU gengetopt

* replaced previously patched files `getopt.c', `getopt.h', and `getopt1.c'
  by standard files from GNUlib

* changed versioning scheme from `x.y.z' to `x.yz' - next version ist 2.04

* completed task #6117 (`https://gna.org/task/?6117'): now using gengetopt to
  organize command line options

* completed task #6078 (`https://gna.org/task/?6078'): implement Woflan file
  format

* fixed bug #12126 (`https://gna.org/bugs/?12126'): `make distcheck' does not
  finish successfully

* added Makefile targets `patch' and `patched' to create and apply patches
  against the Gna! subversion repository
  (`https://gna.org/svn/?group=service-tech')

* added a parameter `decomp' and implemented rudimentary decomposition support

* removed unnecessary files `getopt.h', `getopt.c', and `getopt1.c' from
  `src' directory

* overworked the test cases

* added code coverage checks using LTP LCOV
  (`http://ltp.sourceforge.net/coverage/lcov.php'); checks can be invoked in
  directory `tests' with `make prepare-cover cover'

* when static analysis checks [SA00007], [SA00077], or [SA00078] fail, the
  `error()' function is called instead of letting BPEL2oWFN run towards a
  possible segmentation fault

* completed task #6133 (`http://gna.org/task/?6133'): print number of partner
  links after parsing

* fixed a bug that occurred when BPEL2oWFN read a file from standard input

* cleaned Makefiles (removed explicit rules that were covered by implicit
  rules)

* removed maintainer scripts for Fink and RPM

* added configure scripts from Rachel and Fiona to set the necessary
  compilation flags to compile a Mac Universal binary (`--enable-universal'),
  a 64 bit binary (`--enable-64bit'), or a Windows MinGW binary
  (`--enable-win32')

* used option `gnits' for Automake, see
  `http://www.gnu.org/software/automake/manual/automake.html#Gnits'

* moved acknowledgements from file `AUTHOR' to file `THANKS' to meet the
  strict Gnits requirements

* fixed a bug: Woflan TPN files were not created because of missing
  invokation in `main()' method

* overworked test scripts: creation of output files is checked now

* removed PNML and oWFN parser - this belongs into the Petri Net API

* changed license to GNU Affero General Public License Version 3

* corrected output of final condition (removed `ALL_EXTERNAL_PLACES EMPTY')

Version 2.0.3 (29 June 2007)
============================

* miscellaneous:
     * adopted the GNU GPL Version 3

     * minor changes and bug fixes

Version 2.0.2 (15 June 2007)
============================

* new features:
     * BPEL4Chor choreographies can be translated (further information to
       come)

     * WSDL files can be parsed to support the translation of a BPEL process

     * abstract BPEL processes (both BPEL4WS 1.1 and WS-BPEL 2.0) are now
       parsed


* miscellaneous:
     * when parsing multiple BPEL processes, wildcard like `*.bpel' can be
       used

Version 2.0.1 (11 May 2007)
===========================

* fixed bugs:
     * `<if>'/`<switch>' pattern did not work with parameter
       `communicationonly'

     * `<flow>' activities in repeated constructs (`<while>',
       `<repeatUntil>', ...) could result in unbounded nets

     * parameter `xor' could crash


* miscellaneous:
     * new parameter `nointerface' allows to create dot output of the
       generated Petri net model without drawing the interface

     * transitions of the Petri net model are labeled and colored according
       to their role (only for dot mode)

     * Petri net reduction rules can be chosen using the `reduce' option

     * improved performance of composition of nets in the `consistency' mode

Version 2.0.0 (20 April 2007)
=============================

* input:
     * executable BPEL4WS 1.1 processes

     * executable WS-BPEL 2.0 processes

     * abstract BPEL4WS 1.1 processes (experimental)

     * abstract WS-BPEL 2.0 processes (experimental)

* output:
     * Petri net file formats: APNN, INA (untimed, low-level),   LoLA
       (low-level), Fiona oWFN, PEP notation (low-level),   PNML (with
       extension to model interfaces), SPIN (Promela)

     * other file formats: Graphviz dot, XML

* implemented patterns:
     * overworked feature-complete Petri net semantics for BPEL4WS 1.1 and
       WS-BPEL 2.0

     * overworked simplified Petri net semantics to model the communicational
       behavior only

     * several versions of each pattern controlled by command-line parameters

* static analysis
     * 44 of 94 static analysis goals of the WS-BPEL specification are checked

     * read access to uninitialized variables can be detected using the CFG
       (control flow graph)

     * conflicting receiving activities can be detected using the CFG

* miscellaneous:
     * completely overworked architecture

     * all Petri net-related functions are packaged to a Petri net   API
       (application programming interface) to be published independently of
       BPEL2oWFN soon

     * statistics of the input process are displayed after implicit
       transformation rules are applied

     * messages are classified (error, warning, etc.) and numbered to allow
       for a detailed description in the manual

Version 1.2 (6 April 2006)
==========================

* overworked patterns:
     * more parameterized versions of the Stahl-semantics (see version 1.1):
          * acyclic models (also acyclic event handlers)

          * models without variables

          * models without standard faults occuring while handling a fault
         For more information please refer to the User's Manual.

* static analysis:
     * A control flow graph can be built and used to detect the use of
       uninitialized variables.

* miscellaneous:
     * The command-line parameter `-p finishloop' is renamed to `-p
       finalloop'.

     * Structural reduction rules remove all structural dead nodes of the
       generated Petri net model.

* fixed bugs:
     * Pattern of asynchronous `<invoke>' activity does no longer receive
       messages.

     * Structural reduction rules no longer change the semantics of the
       `<switch>' activity.

     * Structural reduction rules no longer remove the loop transition for
       deadlock search.


Version 1.1 (24 February 2006)
==============================

* new output formats:
     * APNN (Abstract Petri Net Notation) Petri net

     * PNML (Petri Net Markup Language) Petri net

     * low-level PEP (Programming Environment based on Petri Nets) Petri net

* overworked patterns:
     * the Stahl-semantics (see version 1.0) has been enhanced and can be
       parametrized:
          * original semantics

          * models without BPEL's standard faults

          * acyclic models
       For more information please refer to the User's Manual.

* static analysis:
     * To reduce the size of the Petri net model static analysis is used to
       only generate nodes for the DPE (dead path elimination) when necessary.

* miscellaneous:
     * The compiler generator tools Flex, Bison and Kimwitu++ are not any more
       necessary to compile BPEL2oWFN: the generated sources are now part of
       the distrubution.

     * The oWFN format was overworked and allows final markings.

     * GNU getopt allows more flexible command-line parameter processing
       allowing to create several output file formats in a single run.

     * Debug output can be written into a log file.

     * The classes organizing the Petri nets are overworked for performance
       and extensibility.

* fixed bugs:
     * The generation of all possible types of the `<invoke>' activity
       (synchronous, asynchronous, with and without implicit scope) is
       overworked.

Version 1.0 (16 January 2006)
=============================

* input:
     * BPEL process compliant to the specificiation BPEL4WS version 1.1, May
       2003.

* output:
     * LoLA Petri net

     * open workflow net

     * Dot representation

* implemented patterns:
     * Christian Stahl. A Petri Net Semantics fo BPEL. Informatik-Berichte
       188, Humboldt-Universita"t zu Berlin, July 2005.




