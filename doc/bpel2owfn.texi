\input texinfo
@setfilename bpel2owfn.info
@include version.texi
@afourpaper
@finalout
@settitle GNU BPEL2oWFN User's Manual

@c ----------------------------------------------------------------------------

@copying

@b{About this document:}

This manual is for GNU BPEL2oWFN, version @value{VERSION}, a tool translating
a @acronym{BPEL} process into an open workflow net (@acronym{oWFN}), last
updated @value{UPDATED}.

Copyright @copyright{} 2005, 2006, 2007 Niels Lohmann

@quotation
Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.2 or any later version
published by the Free Software Foundation; with no Invariant Sections, with the
Front-Cover Texts being ``A GNU Manual,'' and with the Back-Cover Texts as in
(a) below.  A copy of the license is included in the section entitled ``GNU Free
Documentation License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.''
@end quotation

This manual does not explain how to setup or install GNU BPEL2oWFN. For this
information please read the @i{Installation Manual} which is part of the
distribution, or can be downloaded from the website of GNU BPEL2oWFN,
@url{http://www.gnu.org/software/bpel2owfn}.

@iftex
@image{images/tools4bpel,,0.4in}
@end iftex
@ifhtml
@image{images/tools4bpel}
@end ifhtml

GNU BPEL2oWFN was developed during the Tools4@acronym{BPEL} project funded by
the German Federal Ministry for Education and Research (BMBF), see
@url{http://www.informatik.hu-berlin.de/top/tools4bpel} for details.
@end copying

@c ----------------------------------------------------------------------------

@titlepage
@iftex
@title @image{images/bpel2owfn,,0.5in}
@end iftex

@ifnottex
@title GNU BPEL2oWFN
@end ifnottex

@subtitle Translating @acronym{BPEL} Processes into Open Workflow Nets
@subtitle GNU BPEL2oWFN Version @value{VERSION}, @value{UPDATED}
@vskip 4pt
@subtitle User's Manual

@author Niels Lohmann

@page


@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ----------------------------------------------------------------------------

@ifnottex
@node Top
@top GNU BPEL2oWFN
@insertcopying
@end ifnottex

@c ----------------------------------------------------------------------------

@menu
* Overview:: What GNU BPEL2oWFN can do.
* Invoking GNU BPEL2oWFN:: How to invoke GNU BPEL2oWFN.
* File Formats:: Which file formats are supported.
* Petri Net Patterns:: Which patterns are implemented.
* Petri Net-related Functions:: What is done with the Petri net.
* Limitations and Bugs:: What GNU BPEL2oWFN cannot do.
* Future Work:: What GNU BPEL2oWFN will do in the future.
* References:: Bibliography of cited literature.
* GNU Free Documentation License::The license of this manual.
@end menu

@c ----------------------------------------------------------------------------

@contents
@paragraphindent none





@c ----------------------------------------------------------------------------

@node Overview
@chapter Overview

@section Introduction

The Web Service Business Process Execution Language @acronym{WS-BPEL}, or @acronym{BPEL} for short, is the de-facto standard to describe orchestrations of Web services. @acronym{BPEL} is described in a plain-text specification, standardized by @acronym{OASIS, Organization for the Advancement of Structured Information Standards}, that is, it only has an informal semantics. However, to allow for computer-aided verification, a formal semantics is required.

Stahl in [Sta05] proposes a Petri net semantics that consists of a collection of Petri net patterns, one Petri net pattern for each @acronym{BPEL} construct. To translate a @acronym{BPEL} process to a Petri net model, each activity is translated with its corresponding Petri net pattern which are then composed. This semantics was overworked and adapted to @acronym{WS-BPEL} 2.0 in [Loh07], and is implemented in GNU BPEL2oWFN.

@iftex
@image{images/toolchain,,0.7in}
@end iftex

GNU BPEL2oWFN is a compiler translating a @acronym{BPEL} process into an @acronym{oWFN, open Workflow Net}, that is, into a Petri net model. This @acronym{oWFN} can then be used to:

@itemize
@item check @i{controllability} of this @acronym{oWFN}, that is, whether it is possible to properly interact with the web service,
@item generate the @i{operating guideline} of this @acronym{oWFN}, that is, a characterization of all properly interacting strategies of the web service,
@item check for deadlocks, or
@item check any temporal logic formula with several model checking tools [LoLA, MCK].
@end itemize

GNU BPEL2oWFN uses static analysis to make the generated @acronym{oWFN}
as compact as possible to analyze a chosen property. This is called
@i{flexible model generation}.

GNU BPEL2oWFN is the successor from @acronym{BPEL2PN} [SHS05], a
Java-based compiler generating low-level Petri nets. GNU BPEL2oWFN can be
understood as a re-implementation for extensibility and performance issues. Its
functionality is a superset of the functionality of @acronym{BPEL2PN}.

GNU BPEL2oWFN was written by Niels Lohmann and Christian Gierds. It is part of
the Tools4@acronym{BPEL} project funded by the German Bundesministerium f@"ur
Bildung und Forschung. See
@url{http://www.informatik.hu-berlin.de/top/tools4bpel} for details.



@section Translation Process

The translation process of the @acronym{BPEL} business process is performed in
six steps which we describe briefly in this section:

@enumerate
@item @b{Lexical and syntactical analysis}. GNU BPEL2oWFN parses the
input process according to the specification of @acronym{BPEL4WS} version 1.1
[ACD@math{^+}03]. All information about the process is collected in a symbol
table for further use.

@item @b{Semantic analysis}. The input file is checked against the constraints
of the specification, e.g.@: that each defined link has to be used as source and
target exactly once. @acronym{BPEL} processes violating these constraints are
rejected.

@item @b{@acronym{AST} generation}. For further analysis steps the exact syntax
(indentation etc.) is not used any more. The input process is represented as
an @acronym{AST, abstract syntax tree}. While generating the @acronym{AST}, the
implicit transformation rules of @acronym{BPEL} (e.g.@: the presence of an
@samp{otherwise}-branch with an empty activity) are applied.

@item @b{Net generation}. The nodes of the @acronym{AST} are used to create
the Petri net using the pattern database by applying `unparse'-rules (rules
associating each node with a pattern).

@item @b{Net optimization} (optional). To reduce the generated net several
structural reduction rules can be applied, e.g.@: to merge sequences.

@item @b{Net output}. The generated Petri net can be exported in several file
formats.
@end enumerate



@section Concepts of GNU BPEL2oWFN

In this section we describe the main concepts of GNU BPEL2oWFN used to
realize the translation. Reading this section is not necessary for using
GNU BPEL2oWFN, yet knowing the underlying algorithms and data structures
not only helps to locate bugs, but also helps you to customize
GNU BPEL2oWFN or request a feature.

@anchor{Abstract Syntax Tree}
@subsection Abstract Syntax Tree

The @acronym{AST, abstract syntax tree} is an abstraction of the
syntax tree generated while parsing the @acronym{BPEL} process: any
unnecessary information (e.g.@: indention, brackets or other
``syntax-supporting'' elements) is omitted. It is the central data
structure of GNU BPEL2oWFN. The nodes of the @acronym{AST} are
annotated with pointers to symbol table entries during the analysis steps.
These annotations are used to select the most compact Petri net pattern
from the pattern database to check a given property.


@anchor{Pattern Repository}
@subsection Pattern Repository

The idea of flexible model generation is to find the most compact
model to check a given property. The patterns of the Petri net
semantics of [Sta05] are designed to fit in any given context.
However when the context is known some behavior modeled in the
patterns (i.e.@: some of the nodes) can be safely removed without
changing its semantics. GNU BPEL2oWFN is designed to hold
several sets of Petri net patterns each suitable in certain
contexts. These patterns are collected in a pattern repository.


@anchor{Petri Net Class}
@subsection Petri Net Class

GNU BPEL2oWFN provides many algorithms and data structures to
build, represent, modify and simplify Petri nets and open workflow
nets, resp.@: They are the interface between the pattern database and
the file output for the model checking tool. The functions are
collected in an extensible class allowing to add more output file
formats, structural simplification rules (optimized to preserve certain
properties such as deadlock freedom or liveness) or abstractions
(e.g.@: abstraction from variables, abstraction from external behavior).


@anchor{Control Flow Graph}
@subsection Control Flow Graph

Beside the dynamic analysis of the generated Petri net model with Fiona
or classical model checking tools, GNU BPEL2oWFN prototypically
implements a control flow graph (@acronym{CFG}) (c.f.@: [Hei03]). This @acronym{CFG} can
be used to check most of the constraints of the specification statically,
i.e.@: without actually deploying and running the BPEL process. For example,
the @acronym{CFG} can be used to check if each variable is initialized by an
incoming message or an @code{<assign>} activity.




@c ----------------------------------------------------------------------------

@node Invoking GNU BPEL2oWFN
@chapter Invoking GNU BPEL2oWFN

The standard invocation of GNU BPEL2oWFN is:

@example
bpel2owfn -i service.bpel -f owfn -o
@end example

where @file{service.bpel} is a @acronym{BPEL} process. The option
@samp{-f owfn} causes GNU BPEL2oWFN to generate an open workflow net. This
net is written to a file named @file{service.owfn}, because of the option
@samp{-o}.

GNU BPEL2oWFN can be called without any parameter. In this case, it acts
as a simple parser for @acronym{BPEL} processes that reads its input from the
standard input (@code{stdin}).





@section Options

GNU BPEL2oWFN supports the following command-line options:

@table @samp
@item --help
@itemx -h
Print an overview of the command-line options and exit.

@item --version
@itemx -v
Print version information and exit.

@item --input=@var{filename}.bpel
@itemx -i @var{filename}.bpel
Read a @acronym{BPEL} process from file @file{@var{filename}.bpel}.
If this parameter is omitted, input is read from standard input
(@code{stdin}).

@item --output[=@var{filename}]
@itemx -o
The generated output is written to a file called @var{filename}. If the short
form is used or the @var{filename} is omitted, the input file name is taken and 
extended by the suffix of the chosen file format(s). If this parameter is
omitted, the output is passed to the standard output (@code{stdout}).

@item --log[=@var{filename}]
@itemx -l 
All additional information like warnings and processing information are
written to a file called @var{filename}. If the short form is used or the
@var{filename} is omitted, the output file name is taken and extended by the
suffix @samp{.log}. If this parameter is omitted, the information is passed to
the standard error output (@code{stderr}).

@item --debug=1-4 | flex | bison
@itemx -d 1-4 | flex | bison
This option triggers different debug levels, and can enable additional
information from Flex and Bison about how the input is lexed and parsed.

Debug level:
@table @samp
@itemx 1
Nothing.
@itemx 2
All messages from @samp{-d1}. Additionally, information about the current
steps is displayed.
@itemx 3
All messages from @samp{-d2}. Additionally, the structure of the process is
shown, i.e. when a Petri net is generated...
@itemx 4
All messages from @samp{-d3}. Additionally, a message is displayed each time a
function is entered or left.
@itemx flex
Displays messages flex. Can be combined with any other debug level.
@itemx bison
Displays messages bison. Can be combined with any other debug level.
@end table
@end table





@subsection Modes

When invoking GNU BPEL2oWFN several modes are possible.

@table @samp
@item --mode=@var{modus}
@itemx -m @var{modus}

GNU BPEL2oWFN supports different modes for handling input @acronym{BPEL}
files: @samp{@var{modus}} can be one of the following:

@table @samp
@item ast

Outputs the @acronym{AST, abstract syntax tree} generated while
parsing the input file to standard output. This option is mostly
used for debugging reasons since it shows the implicit transformations
and the phylum names used when generating the Petri net.

@item cfg

For control flow analysis (a form of static analysis) a @acronym{CFG, Control
Flow Graph} is generated. It can be printed in graphical (dot)
representation. This option is in an early beta-stage and can only check
for uninitialzed variables yet.

@item consistency

Todo.

@item petrinet

Generates a Petri net representing the semantics of the given
process. Other options can be added to simplify or modify that generated Petri
net (see below).

@item pretty

Outputs the parsed @acronym{BPEL} file in @acronym{XML} representation. Any
unnecessary attributes are omitted. This option is mostly used for debugging
reasons as it shows the implicit transformations and the identifiers of the
@acronym{BPEL} constructs.
@end table

Note that you can only use at most one mode. If no mode is given, GNU
BPEL2oWFN acts like a @acronym{BPEL} parser.

@end table





@subsection Additional parameters

These options control some Petri net-related options.

@table @samp
@item --parameter=@var{par}
@itemx -p @var{par}

@table @samp
@item communicationonly

Only the communicational behavior of the input @acronym{BPEL} process is
modeled. That is, the negative control flow (in particular fault, termination,
or compensation handlers, @code{<exit>}, @code{<throw>}, @code{<compensate>},
@code{<compensateScope>} activities) is not translated to the Petri net
model. When combined with @samp{reduce}, this parameter yields the most
compact Petri net model.

@item fhfaults

Confines the @samp{standardfaults} parameter: in the negative control flow,
that is in activities in fault or termination handlers, no further
@acronym{BPEL} standard faults can occur.

@item reduce

Apply several structural reduction rules to the generated Petri net model. The
rules preserve deadlocks, livelocks and all deadlock-free communicating
partners. In addition, structurally dead nodes of the Petri net, for example,
unmarked places without ingoing arcs are removed.

@item standardfaults

Model the occurrence of standard faults. When this parameter is ommited, only
user-defined faults, that is, faults thrown with @code{<throw>} activities, and
join failures can occur. With the @samp{standardfaults} parameter, also the
occurrence of other @acronym{BPEL} standard faults is modeled. This parameter
yields the most-detailled, and thus biggest Petri net model.

@item variables

Add places for the variables of the input @acronym{BPEL} process to the Petri
net model. As the generated model abstracts from data, that is, a low-level
Petri net is generated, the @samp{variables} parameter also does not introduce
data aspects. Thus, this mode is experimental.
@end table

If you want to enable more than one parameter you have to add @samp{-p}/
@samp{--parameter} to each parameter.

@end table





@subsection Output formats

Especially for the Petri net mode, a variaty of output formats are supported. There are invoked by the
following option:

@table @samp

@item --format=@var{fileformat}
@itemx -f @var{fileformat} 

Creates a file in a given ouput file format. Each file format is only available in
certain modes. If you want to use more than one output file format you have to add @samp{-f}/
@samp{--format} to each file format. Please note that the underlying modes
of the given file formats are the same. You cannot, for example, create @acronym{XML} and
@acronym{LoLA} files together since @acronym{XML} requires the mode
@samp{pretty}, whereas @acronym{LoLA} requires the mode @samp{petrinet}.

@table @asis
@item Petri net file formats (imply mode @samp{petrinet} or @samp{consistency}):

@table @samp
@item apnn
Outputs the inner of the generated open workflow net in
@acronym{APNN, Abstract Petri Net Notation}. When the parameter @samp{-o} is
used, a file with the suffix @samp{.apnn} is created.

@item ina
Outputs the inner of the generated open workflow net as untimed low-level
Petri net in @acronym{INA, Integrated Net Analyzer} format. When the parameter
@samp{-o} is used, a file with the suffix @samp{.pnt} is created.

@item lola
Outputs the inner of the generated open workflow net as low-level Petri net in
@acronym{LoLA, Low-Level Analyzer} file format. When the parameter @samp{-o}
is used, a file with the suffix @samp{.lola} is created.

@item owfn
Outputs the generated open workflow net in Fiona file format. Note that the
Fiona file format is --- together with the @acronym{PNML} file format --- the
only Petri net output format that outputs the complete open workflow net, that
is, also the interface is exported. When the parameter @samp{-o} is used, a
file with the suffix @samp{.owfn} is created.

@item pep
Outputs the inner of the generated open workflow net as low-level Petri net in
low-level @acronym{PEP} notation. When the parameter @samp{-o} is used, a
file with the suffix @samp{.llnet} is created.

@item pnml
Outputs the generated open workflow net in @acronym{PNML, Petri Net Markup
Language}. Note that the @acronym{PNML} file format is --- together with the
Fiona file format --- the only Petri net output format that outputs the
complete open workflow net, that is, also the interface is exported.
Currently, the interface places are annotated using a @code{<type>} tag
which is only supported by Yasper. When the parameter @samp{-o} is used, a
file with the suffix @samp{.pnml} is created.

@item spin
Outputs the inner of the generated open workflow net as low-level Petri net in
Promela (Process Meta Language) for the model checker SPIN. When the parameter
@samp{-o} is used, a file with the suffix @samp{.spin} is created.
@end table

@item Other file formats (note the required mode):
@table @samp
@item dot
When mode @samp{petrinet} is used, the generated open workflow net is printed
in Graphviz dot representation. When mode @samp{ast} is used, the
@acronym{AST, abstract syntax tree} is printed in Graphviz dot representation.
When mode @samp{cfg} is used, the @acronym{CFG, control flow graph} is printed
in Graphviz dot representation.

In both cases, when the tool @code{dot} is found in the search path during
configuration of GNU BPEL2oWFN and the parameter @samp{-o} is used,
@code{dot} is used to generate a @acronym{PNG, Portable Network Image} file.
In this case, two files with the suffixes @samp{.dot} and @samp{.png} are
created. Note that when the @samp{ast} mode is used with the @samp{dot} file
format, the @samp{-o} parameter has to be used.

@item info
When mode @samp{petrinet} is used, information about the places and
transitions of the generated net in a
proprietary @acronym{ASCII}-based format. For each place and transition, all
roles, that is, inscriptions of the Petri net patterns, are listed. The
information can be used to correlate the generated Petri net model with the
input @acronym{BPEL} process. When the parameter @samp{-o} is used, a file
with the suffix @samp{.info} is created.

@item xml
When the mode @samp{pretty} is used, the pretty-printed input @acronym{BPEL}
process --- with the implicit transformation rules applied -- exported in
@acronym{XML, Extensible Markup Lanuage}. When the parameter @samp{-o} is
used, a file with the suffix @samp{.xml} is created.
@end table
@end table
@end table





@anchor{Examples}
@section Examples
In this section we show some examples how GNU BPEL2oWFN can be
invoked.

@table @samp
@item bpel2owfn -i sample.bpel -flola -finfo -o -p simplify

Reads the file @file{sample.bpel}, generates a structural simplified
low-level Petri net and saves it in a @acronym{LoLA} file
@file{sample.lola}. For further information a file
@file{sample.info} is generated.

@item bpel2owfn -i sample.bpel -fowfn -d3 -o

Reads the file @file{sample.bpel}, generates a low-level open
workflow net and saves it in an @acronym{oWFN} file
@file{sample.owfn}. For further information a file
@file{sample.info} is generated. During the conversion several debug
messages are printed to standard output.

@item @var{prog} | bpel2owfn -fdot -m petrinet | dot -Tpng -osample.png

Runs the program @var{prog} and reads its output as @acronym{BPEL}
process, generates a Petri net and outputs its Dot representation.
This stream is read by Dot which layouts the Petri net and creates an output
@acronym{PNG, Portable Network Graphic} file @file{sample.png}.

@item bpel2owfn -i sample.bpel -m ast

Reads the file @file{sample.bpel} and prints the abstract syntax tree
(@acronym{AST}) to standard output.
@end table





@c @section Exit Values

@c When GNU BPEL2oWFN is invoked and run without any error, the
@c exit value is 0.


@c Please report the occurrence of any exception with numbers 30--50
@c since it indicates a bug in GNU BPEL2oWFN we would like to fix
@c immediately (see @ref{Reporting Bugs}).





@c ----------------------------------------------------------------------------

@node File Formats
@chapter File Formats

In this chapter, we show how a @acronym{BPEL} process can be translated to a Petri net model an then exported to several output file formats. Consider the following simple @acronym{BPEL} process @samp{example.bpel}:

@smallexample
<process name="exampleprocess" targetNamespace="www.gnu.org/software/bpel2owfn">
  <partnerLinks>
    <partnerLink name="PL" partnerLinkType="PLT"
      myrole="exampleprocess" partnerRole="exampleuser" />
  </partnerLinks>

  <sequence>
    <receive partnerLink="PL" operation="req" createInstance="yes" />
    <reply partnerLink="PL" operation="ack" />
  </sequence>
</process>
@end smallexample

This process just waits for a message @samp{req} on partner link @samp{PL} and replies to this message with @samp{ack} on the same partner link. To parse this @acronym{BPEL} process, GNU BPEL2oWFN has to be invoked with

@cartouche
@smallexample
bpel2owfn -i example.bpel
@end smallexample
@end cartouche

which responds with a statistical output:

@smallexample
6 activities (4 basic, 2 structured, 0 scopes)
0 user-defined handlers (0 FH, 0 TH, 0 CH, 0 EH)
0 links, 0 variables
@end smallexample

This means, the process consists of six activities (four basic activities and two structured activities), no handlers, no links and no variables. Obviously, the given process has only one structured actvity (the @code{<sequence>}) and two structured activities (the @code{<receive>} and @code{<reply>} activity). So where are the additional activities come from?

The @acronym{BPEL} specification describes several implicit transformations of the input process, as well as standard fault, termination and compensation handlers. In the considered @acronym{BPEL} process, no fault handlers are specified. Thus, a standard fault handler is added by GNU BPEL2oWFN:

@smallexample
<faultHandlers>
  <catchAll>
    <sequence>
      <compensate />
      <rethrow />
    </sequence>
  </catchAll>
</faultHandlers>
@end smallexample

To see how the @acronym{BPEL} process looks like after applying the transformation rules and adding the standard handlers, GNU BPEL2oWFN output the manipulated process using its pretty-printer:

@cartouche
@smallexample
bpel2owfn -i example.bpel -m pretty
@end smallexample
@end cartouche

The manipulated process looks like this:

@smallexample
<process id="1" abstractProcess="no" exitOnStandardFault="no" name="exampleprocess"
 suppressJoinFailure="no" targetNamespace="www.gnu.org/software/bpel2owfn">
  <partnerLinks>
    <partnerLink id="3" myrole="exampleprocess"
       name="PL" partnerLinkType="PLT" partnerRole="exampleuser" />
  </partnerLinks>
  <faultHandlers id="4">
    <catchAll id="13">
      <sequence id="12" suppressJoinFailure="no">
        <compensate id="11" suppressJoinFailure="no">
        </compensate>
        <rethrow id="10">
        </rethrow>
      </sequence>
    </catchAll>
  </faultHandlers>
  <sequence id="7" suppressJoinFailure="no">
    <receive id="8" createInstance="yes" operation="req"
       partnerLink="PL" suppressJoinFailure="no">
    </receive>
    <reply id="9" operation="ack" partnerLink="PL" suppressJoinFailure="no">
    </reply>
  </sequence>
</process>
@end smallexample

Each activity is printed together with its attributes. Note that the standard values of several attributes (e.g., @samp{abstractProcess} or @samp{suppressJoinFailure}) are added. Furthermore, an identifier (attribute @samp{id}) was added to every activity.

We now want to create a compact Petri net model of the @acronym{BPEL} process, using the @samp{petrinet} mode and the @samp{communicationonly} parameter:

@cartouche
@smallexample
bpel2owfn -i example.bpel -m petrinet -p communicationonly
@end smallexample
@end cartouche

GNU BPEL2oWFN now also displays statistics of the generated Petri net model:

@smallexample
|P|=5, |P_in|= 1, |P_out|= 1, |T|=2, |F|=6
@end smallexample

The generated Petri net model consists of five places, including one input and one output place, two transitions and six arcs. To create a graphical representation, invoke GNU BPEL2oWFN with the following options:

@cartouche
@smallexample
bpel2owfn -i example.bpel -m petrinet -p communicationonly -f dot -o
@end smallexample
@end cartouche

This command creates a file @samp{example.dot}, containing a Graphviz dot representation of the Petri net, and---if the @code{dot} tool was found in the search path---a @acronym{PNG, Portable Network Graphics} an image file @samp{example.png}. The latter looks like this:

@iftex
@image{images/example,,2.0in}
@end iftex

The graphic depicts the generated open workflow net. The inner of the net, that is, all nodes except the interface places, are depicted inside the dashed box, whereas the interface is depicted outside the frame. Input places and all connected transitions are colored orange. Similarly, output places and connected transitions are colored yellow. Gray places belong to the final marking, that is, the marking [@sansserif{p3}] is the final marking of the @acronym{oWFN}.

To reach this final marking, the environment has to send a message @sansserif{in.PL.req}, followed by receiving a message @sansserif{out.PL.ack}. The name of the communication places is composed by the communication direction (``in'' or ``out''), the partner link's name (@samp{PL}) and the operations name (@samp{req} or @samp{ack}).

For this very small process, it is easy to validate the generated Petri net model, that is, to compare the intended semantics by the actually modeled semantics. Especially the correlation between the nodes of the Petri net and the activities of the input @acronym{BPEL} process is not obvious for larger processes. To this end,

@cartouche
@smallexample
bpel2owfn -i example.bpel -m petrinet -p communicationonly -f info
@end smallexample
@end cartouche

displays an information file, consisting of all the Petri net nodes' roles.

@smallexample
PLACES:
ID      TYPE            ROLES
p1      internal        1.internal.initial
                        7.initial
                        7.internal.initial
                        8.initial
                        8.internal.initial
p2      internal        8.final
                        8.internal.final
                        9.initial
                        9.internal.initial
p3      internal        1.internal.final
                        7.final
                        7.internal.final
                        9.final
                        9.internal.final
in.PL.req       input           in.PL.req
out.PL.ack      output          out.PL.ack

TRANSITIONS:
ID      ROLES
t1      8.internal.receive
t2      9.internal.reply
@end smallexample

This file has to be read as follows: the place @samp{p1} has the type internal (i.e., is not connected with an interface place) and has the roles @samp{1.internal.initial}, @samp{7.initial}, @samp{7.internal.initial}, @samp{8.initial}, and @samp{8.internal.initial}. While the prefix of each role is the identifier of an activity (@samp{1} for the @code{<process>}, @samp{7} for the @code{<sequence>}, and @samp{8} for the @code{<receive>}), the suffix specifies the role inside the respective pattenr. Without going too much into details, @samp{1.internal.initial} is the role of the initial place of the pattern for the @code{<process>}, whereas, for example @samp{7.internal.final} is the final place of the @code{<sequence>}'s pattern. Similarly, roles of transitions are specified. Multiple roles of a single place arise due to the merging of distinct places during the composition of the several patterns.

Now that we have conviced ourselves that the generated net reflects the intended behavior of the @acronym{BPEL} process, we can export the Petri net model to an output file to process it by analysis tools. In this case, we want to create a Fiona open workflow net executing

@cartouche
@smallexample
bpel2owfn -i example.bpel -m petrinet -p communicationonly -f ownf -o
@end smallexample
@end cartouche

which creates a file @samp{example.owfn}:

@smallexample
@{
  generated by: GNU BPEL2oWFN 2.0.0
  input file:   `example.bpel' (process `exampleprocess')
  invocation:   `bpel2owfn -i example.bpel -m petrinet -p communicationonly -f owfn'
  net size:     |P|=5, |P_in|= 1, |P_out|= 1, |T|=2, |F|=6
@}

PLACE
  INTERNAL
    p1, p2, p3;

  INPUT
    in.PL.req @{$ MAX_OCCURRENCES = 1 $@};

  OUTPUT
    out.PL.ack @{$ MAX_OCCURRENCES = 1 $@};


INITIALMARKING
  p1:    1 @{initial place@};

FINALMARKING
  p3 @{final place@};


TRANSITION t1 @{ input @}
  CONSUME in.PL.req, p1;
  PRODUCE p2;

TRANSITION t2 @{ output @}
  CONSUME p2;
  PRODUCE out.PL.ack, p3;


@{ END OF FILE `example.owfn' @}
@end smallexample







@c ----------------------------------------------------------------------------

@node Petri Net Patterns
@chapter Petri Net Patterns
In version @value{VERSION} of GNU BPEL2oWFN the following Petri net
patterns are implemented:



@section Petri net semantics from [Sta05]

The Petri net semantics for @acronym{BPEL4WS} from Christian Stahl
(Humboldt-Universit@"at zu Berlin) published in [Sta05].

@subsection Overview

Feature complete semantics covering both positive control flow with
event handling and negative control flow (fault and compensation
handling).

@anchor{Limitations of the semantics}
@subsection Limitations of the semantics
@itemize

@item Only one instance of a @acronym{BPEL} process can be
transformed into a Petri net.

@item The semantics abstracts from the connection of a
@acronym{BPEL} process to its partner processes. The interface of a
@acronym{BPEL} process is transformed into a set of message
channels, i.e.@: places in the Petri net.

@item In our Petri net patterns we model data, but we abstract from
the definition of the functions which edit the data. Furthermore, we
did not specify the transition guards and so we did not specify
which circumstances are necessary that a specific fault can occur.

@item Every activity is limited to one correlation set (except the
synchronous invoke which is limited to two correlation sets).

@end itemize


@anchor{Changes and Modulation}
@subsection Changes and Modulation

We tried to stick as close to the Petri net patterns of [Sta05] as
possible. However, the implemented patterns in the pattern database
sometimes differ to the given patterns due to discovery of bugs or
implementation decisions. In this subsection we sum up these changes
to help you understand the generated Petri net model.

@itemize

@item @b{Fault model}. At most one error can occur in the positive
control flow of each scope or process. Yet this confines the
possible runs of the process it is only a little change of the
semantics, since --- according to the specification --- only the
first fault is handled anyway. While further faults occurring before
the positive control flow is stopped are ignored in the original
semantics of [Sta05] (in fact, the faults are collected on place
@samp{fault_in} and then consumed by a reset arc) they are prevented
in the implemented semantics. In our model, exactly the @i{first}
occurring fault is handled, whereas in [Sta05] one fault is chosen
non-deterministically.

Furthermore, all @samp{failed} places of the activities were
removed. In the original Petri net semantics, all faults of a scope
were collected on the @samp{fault_in} of the stop-pattern and then
classified as being the first fault of the scope, a following fault,
a fault from the fault handler, a fault from the compensation
handler, or a fault from a child scope. In our implementation, new
places (@samp{fh_fault_in} and @samp{ch_fault_in}) were introduced
and each activity throws its faults to the ``correct'' place
automatically.

To ensure that at most one error can occur (i.e.@: at most one token
is produced on any fault place) the fault places are guarded by
state places: To throw a fault from an activity enclosed in a scope,
the state of that scope has to be @samp{Active}. The first thrown
fault changes the state to @samp{!Active} thus preventing more
faults to occur. The places @samp{fh_fault_in} and
@samp{ch_fault_in}, resp.@: are guarded by
@samp{!FHFaulted}/@samp{FHFaulted} and
@samp{!CHFaulted}/@samp{CHFaulted}, resp.

Moreover, the generated Petri nets have less nodes than those
generated by @acronym{BPEL2PN} [SHS05] since an unfolding of the
reset arcs in not necessary any more.

@item @b{Standard faults}. The ``throw-fault'' and ``stop'' transitions
are generated using parametrized functions. With the command-line parameter
@samp{--parameter=nostandardfaults} all @acronym{BPEL} standard faults
that can occur in the activites (i.e. all faults except user-defined faults
in a throw activity or join failures) are suppressed. The generated models
have a smaller state space and allow the analysis for controllability
which is impossible without the assumption that messages can always be
sent faultlessly.

In order not to suppress standard faults at all, the command-line parameter
@samp{--parameter=nofhfaults} can be used to allow standard faults outside
fault handlers, i.e.@: to create models that allow the occurrence of one
standard fault in each scope yet disallow to occurrence of further faults.

@item @b{1-safety}. The new modeling of the fault management yields
to 1-safe Petri nets (i.e.@: any reachable state of the Petri net
model puts at most one token on each place of the net).

Beside performance (e.g.@: only 1 bit is needed to store the marking
of a place) and compatibility issues (e.g.@: 1-safety is a
prerequisite to use the Model-Checking Kit [MCK]), features not
supported by the Petri net semantics can be discovered since the
generated net will most likely violate 1-safety when an unsupported
@acronym{BPEL} feature is used. If, for example, a scope is enclosed
in a while loop (which would model instantiation which is not
supported by the Petri net semantics @ref{Limitations of the
semantics}), the state places of that scope would not be 1-safe.

@item @b{Assign activity}. All copy branches of an assign activity
are modeled in a single pattern (i.e.@: Fig.@: 6 and Fig.@: 7 are merged).
Furthermore, when an error (outside that activity) occurs, an active
assign-activity is not stopped until all copy branches have
finished. This is described in [ACD@math{^+}03] as:

@quotation
The assign activities are sufficiently short-lived that they are allowed to
complete rather than being interrupted when termination is forced.
@end quotation

This change fixes a bug in the Petri net semantics.

@item @b{While activity}. Since the original semantics does not support
instances of the BPEL process, while activities were poorly supported and
usually produced non 1-safe Petri nets or deadlocks as links embedded in
the while activity were evaluated incorrectly. In the implementation the
while activity is acyclic: the embedded activity is now executed at most
once (whether or not it is executed is decided non-deterministically).

The ``original'' behavior can be restored with the command-line parameter
@samp{--parameter=cyclicwhile}.

@item @b{Event handlers}. There is one pattern for both alarm and
message event handlers (i.e.@: Fig.@: 29 and Fig.@: 30 are merged). When
no event handler is specified, an ``implicit'' event handler is
installed which is just a stub and does not change the semantics. The
message event handlers are acyclic by default to create acyclic Petri net
models. However, the ``original'' behavior can be restored with the
command-line parameter @samp{--parameter=cycliceh}.

@item @b{Deadlocks}. A transition named @samp{1.internal.finalloop}
can be added to livelock the process upon completion using the command-line
parameter @samp{--parameter=finalloop}. This leads to
deadlock-free Petri nets in case of processes with ``reasonable''
control flow and helps to find unwanted deadlocks occurring due
wrong modeling. If, for example, the links of a process model are
cyclic the generated Petri net will deadlock.

In future versions of GNU BPEL2oWFN these found deadlocks
shall be mapped back into the @acronym{BPEL} code to highlight the
``unreasonable'' activities (i.e.@: a cycle-closing link).

@item @b{Unfoldings of high-level places}. Due to the abstraction (high-level to
low-level) of the patterns some places were unfolded: the place
@samp{compScope} of Fig.@: 42--44 usually holding a token with a name
of a scope is unfolded to @samp{compScope.@var{scopename}} and only
merged with the @samp{ch_in}-place of that respective scope. In all
other cases the places are ``converted'' to low-level places so the
generated model completely abstracts from data.

@item @b{Link semantics}. The generated Petri net model always
generates @samp{negLink} places for structured activities
independently of the presence of links. Anyway, the semantics is not
changed since the resulting subnets are dead in this case.

@item @b{Correlation sets}. Correlation sets are not implemented and
are simply ignored during parsing.
@end itemize





@c ----------------------------------------------------------------------------

@node Petri Net-related Functions
@chapter Petri Net-related Functions

Currently implemented Petri net-specific functions:
@section Structural Simplification

GNU BPEL2oWFN implements the following structural reduction rules:

@c @float
@c @center @noindent @image{images/ra1,,1.2in}@ @ @ @ @ @ @ @ @ @ @image{images/rb1,,1.2in}
@c @sp 1
@c @center @noindent @image{images/ra2,,1.2in}@ @ @ @ @ @ @ @ @ @ @image{images/rb2,,1.2in}
@c @sp 1
@c @end float


@itemize
@item If two transitions @math{t_1} and @math{t_2} have the same
preset and postset, one of them can be removed.

@item If a transition has a singleton preset and postset, the
transition can be removed (sequence) and the preset and postset can
be merged.

@item All places with empty preset and postset (isolated places) are
removed.
@end itemize

These structural reduction rules are implemented in the command-line option
@samp{--parameter=simplify}, see @ref{Invoking GNU BPEL2oWFN}). To acheive a
better reduction, combine the parameter with @samp{--parameter=novarialbles}.



@section Abstractions
@itemize

@item To obtain a place/transition Petri net from an open workflow
net the communication places are removed. This abstraction from
communicational behavior is used in all Petri net output formats
except @acronym{oWFN} (@samp{--format=owfn}).

@item The original Petri net semantics [Sta05] consists of high-level
Petri net patterns. However, the models generated from GNU BPEL2oWFN
abstract from data. Therefore all transition guards, arc inscriptions
and arc types were ``converted'' to low-level constructs: all
transition guards and arc inscriptions were removed (decisions are
now made non-deterministically) and read arcs are ``unfolded'' to
loops. Due to a new fault management (see @ref{Changes and
Modulation}) the patterns do not contain any reset arcs and is 1-safe.
@end itemize



@section Markings

The following places are initially marked to ensure a deadlock-free
model of processes with ``reasonable'' control-flow (e.g.@: with an
acyclic link structure):

@itemize
@item the initial place of the process (@samp{1.internal.initial}),

@item the variable places (@samp{variable.@var{variablename}}), and

@item the clock (@samp{1.internal.clock}) if the process embeds an
alarm event handler or a @code{<wait>} activity.
@end itemize



@c ----------------------------------------------------------------------------

@node Limitations and Bugs
@chapter Limitations and Bugs



@c @section Limitations
@c 
@c The current version of GNU BPEL2oWFN underlies several limitations:
@c 
@c @itemize
@c @item The pattern database consists of only one collection of patterns
@c (i.e.@: the semantics of [Sta05], see @cite{Petri Net Patterns}). However,
@c the patterns are parametrized: using the command-line arguments
@c @samp{--parameter=nostandardfaults} and/or @samp{--parameter=cyclicwhile}
@c yield to different models using the same ``base'' semantics.
@c @end itemize



@section Known Bugs

As this is the first public version of GNU BPEL2oWFN the
translation from a @acronym{BPEL} process to an open workflow net
might be unstable or incorrect in some few scenarios:

@itemize

@item @b{Problem:} The original semantics of [Sta05] was created to
support executable @acronym{BPEL} processes. Therefore the
translation of abstract @acronym{BPEL} processes (business
protocols) might throw an exception or even crash.

@b{Solution:} Each communicating activity (i.e.@: @code{invoke},
@code{receive}, @code{reply}) should be defined with (input/output)
variables.

@c @item @b{Problem:} The implementation of the structural reduction
@c rules might crash when applied to @acronym{BPEL} processes that
@c created Petri nets with a large number of nodes.
@c 
@c @b{Solution:} Avoid using the @samp{--parameter=simplify} mode in this case.

@item @b{Problem:} The parser of GNU BPEL2oWFN is not capable
of skipping @acronym{XML} elements originating other namespaces than
`@code{bpws}'. Processes using these elements are rejected with a
syntax error message.

@b{Solution:} Try removing or commenting these elements.

@item @b{Problem:} @acronym{LoLA} does not accept the generated files and
reports parse errors in the first line.

@b{Solution:} This problem occurs using a pre-compiled windows version
of GNU BPEL2oWFN. The generated files are in Windows format, yet
@acronym{LoLA} only supports files in Unix format. To overcome this
limitation of @acronym{LoLA}, use a tool like @samp{dos2unix} or
change the file format in an editor like vi.
@end itemize



@anchor{Reporting Bugs}
@section Reporting Bugs

If you find a bug in GNU BPEL2oWFN, please first check that it
is not a known bug listed in `Known Bugs'. Otherwise please send us
an electronic mail to @email{bug-bpel2owfn@@gnu.org}.
Include the version number which you can find by running
@samp{bpel2owfn --version}. Also include in your message the input
@acronym{BPEL} process and the output that the program produced. We
will try to answer your mail within a week.

If you have other questions, comments or suggestions about
GNU BPEL2oWFN, contact us via electronic mail to
@email{nlohmann@@informatik.hu-berlin.de}.



@section Contact Person
Niels Lohmann

Humboldt-Universit@"at zu Berlin@*
Institut f@"ur Informatik@*
Unter den Linden 6@*
10099 Berlin, Germany

@table @asis
@itemx Homepage
@url{http://www.informatik.hu-berlin.de/top/mitarbeiter/lohmann}

@itemx E-mail
@email{nlohmann@@informatik.hu-berlin.de}

@itemx Phone
(+49) (30) 2093-3070

@itemx Fax
(+49) (30) 2093-3067
@end table




@c ----------------------------------------------------------------------------

@node Future Work
@chapter Future Work

For future releases of GNU BPEL2oWFN the following features are planned:

@itemize

@c @item @b{Flexible model generation}. Originally, GNU BPEL2oWFN
@c was designed to support flexible model generation, i.e.@: finding the
@c most abstract (thus smallest) model capable to check a given
@c property. With static analysis we hope to generate the smallest
@c Petri net possible to check properties like deadlock-freedom or
@c controllability.

@item @b{Add data aspects}. In the implemented patterns we abstract
from data and do not evaluate join or transition conditions. Instead all
decisions are made non-deterministically. With static analysis it is
possible to find the relevant ranges of values that allow a replacement
of non-deterministic choices with choices made evaulating data. This
technique (called @i{abstract interpretation}) might help to reduce the
modelled behavior of the process yet being more precise.

@item @b{Control flow analysis}. In [Hei03] a control flow graph for
@acronym{BPEL} was introduced. This control flow graph (currently
implemented prototypic) is the base for more sophisticated analysis,
e.g.@: finding unreachable activities, uninitialized variables or
other problems that can occur during runtime.

@c @item @b{More Petri net patterns}. Being feature-complete the Petri
@c nets generated from the Petri net semantics of [Sta05] consist of a
@c large number of nodes and might be to large to be analyzed by model
@c checkers. The elaboration of different petri net patterns
@c specialized for certain purposes (e.g.@: omitting the negative control
@c flow) does not only help to find smaller models, but is also a
@c prerequisite for flexible model generation.

@item @b{Detailed info-files}. The generated info-files currently just
list the nodes of the generated net. To help the retranslation of Petri
net-specific properties to the input process the generated files have
to be more detailed. The integration of a symbol table is currently
in pre-beta state and should be finished in the next version of
GNU BPEL2oWFN.

@item @b{Support for @acronym{WS-BPEL}}. The specification of
@acronym{WS-BPEL, Web Service Business Process Execution Language}
version 2.0 is in its final phase. As soon as the standardization is
completed, @acronym{WS-BPEL} can be supported by GNU BPEL2oWFN
by overworking the grammar and adding appropriate patterns to the
pattern database.

@end itemize





@c ----------------------------------------------------------------------------

@node References
@appendix References

@table @asis

@item [ACD@math{^+}03]
Tony Andrews, Francisco Curbera, Hitesh Dholakia, Yaron Goland, Johannes Klein,
Frank Leymann, Kevin Liu, Dieter Roller, Doug Smith, Satish Thatte, Ivana
Trickovic, and Sanjiva Weerawarana. @b{Business Process Execution Language for
Web Services, Version 1.1}. Technical report, BEA Systems, IBM, Microsoft, SAP,
Siebel Systems. May 2003.

@item [BKK95]
Falko Bause, Peter Kemper, and Pieter Kritzinger. @b{Abstract Petri Net
Notation}. @i{Petri Net Newsletter} 49:9-27, October 1995.
@footnote{@url{http://ls4-www.informatik.uni-dortmund.de/QM/MA/fb/publication_ps_files/APNN.ps.gz}}

@item [Fiona]
Peter Massuthe and Daniela Weinberg. @b{Fiona}.@footnote{@url{http://www.informatik.hu-berlin.de/top/tools4bpel/fiona}}

@item [Hei03]
Thomas Heidinger. @b{Statische Analyse von BPEL4WS-Prozessmodellen} @i{(in German)}.
Studienarbeit, Humboldt-Universit@"at zu Berlin, December 2003.
@footnote{@url{http://www.informatik.hu-berlin.de/top/download/publications/heidinger03.pdf}}

@item [LoLA]
Karsten Schmidt. @b{@acronym{LoLA}: A Low Level Analyser}. Manual.
@footnote{@url{http://www.informatik.hu-berlin.de/top/lola/doku.ps}}

@item [Mar03]
Axel Martens. @b{Verteilte Gesch@"aftsprozesse -- Modellierung und Verifikation
mit Hilfe von Web Services} @i{(in German)}. PhD thesis, Humboldt-Universit@"at
zu Berlin, Mathematisch-Naturwissenschaftliche Fakult@"at II, 2003.

@item [MCK]
Javier Esparza, Claus Schr@"oter, and Stefan Schwoon. @b{Model-Checking Kit}.
@footnote{@url{http://www.fmi.uni-stuttgart.de/szs/tools/mckit}}

@item [MRS05]
Peter Massuthe, Wolfgang Reisig, and Karsten Schmidt. @b{An Operating Guideline
Approach to the SOA}. Proceedings of the 2nd South-East European Workshop on
Formal Methods 2005 (@acronym{SEEFM}05), Ohrid, Republic of Macedonia, 2005.
@footnote{@url{http://www.informatik.hu-berlin.de/top/download/publications/MassutheReisigSchmidt-OGApproach.ps}}

@item [PEP]
University of Oldenburg, Department of Computing Science. @b{@acronym{PEP,
Programming Environment based on Petri Nets}}. Manual.
@footnote{@url{http://parsys.informatik.uni-oldenburg.de/~pep}}

@item [Sch00]
Karsten Schmidt. @b{@acronym{LoLA}: A Low Level Analyser}. In: Mogens Nielsen,
and Dan Simpson, editors: @i{Application and Theory of Petri Nets, 21st
International Conference (@acronym{ICATPN} 2000)}, pp. 465-474, Springer-Verlag
(@acronym{LNCS} 1825), June 2000.

@item [SHS05]
Sebastian Hinz, Karsten Schmidt, and Christian Stahl. @b{Transforming BPEL to
Petri Nets}. In W.M.P. van der Aalst, B. Benatallah, F. Casati, and F. Curbera,
editors, @i{Proceedings of the Third International Conference on Business
Process Management (@acronym{BPM} 2005)}, pp. 220-235, Springer-Verlag
(@acronym{LNCS} 3649), September 2005.
@footnote{@url{http://www.informatik.hu-berlin.de/top/bpel2pn}}

@item [Sta05]
Christian Stahl. @b{A Petri Net Semantics for @acronym{BPEL}}.
Informatik-Berichte 188, Humboldt-Universit@"at zu Berlin, July 2005.
@footnote{@url{http://www.informatik.hu-berlin.de/Institut/struktur/systemanalyse/preprint/stahl188.pdf}}

@item [Wei04]
Daniela Weinberg. @b{Analyse der Bedienbarkeit}. Diplomarbeit,
Humboldt-Universit@"at zu Berlin, October 2004.
@footnote{@url{http://www.informatik.hu-berlin.de/top/download/publications/weinberg04.pdf}}

@item [WK02]
Michael Weber and Ekkart Kindler. @b{The Petri Net Markup Language}. In: Hartmut Ehrig,
Wolfgang Reisig, Grzegorz Rozenberg, Herbert Weber, editors: @i{Petri Net Technology for
Communication-Based Systems: Advances in Petri Nets}, pp. 124-144, Springer Verlag
(@acronym{LNCS} 2472), January 2003.@footnote{@url{http://www.informatik.hu-berlin.de/top/pnml/download/about/PNML_LNCS.pdf}}

@end table





@c ----------------------------------------------------------------------------

@include fdl.texi

@bye
